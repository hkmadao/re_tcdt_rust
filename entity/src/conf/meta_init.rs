//! entity meta_init.rs file. Generated by build, if necessary please change in build/templates/meta_init.tera
use crate::meta;
use crate::common::desc::EntityDesc;
use lazy_static::lazy_static;
use std::collections::HashMap;

// pub static mut DESC_MAP: Option<&mut HashMap<String, EntityDesc>> = None;

// pub fn init_desc() {
//     let mut desc_map: HashMap<String, EntityDesc> = HashMap::new();
//     unsafe { DESC_MAP = Some(Box::leak(Box::new(desc_map))) };
// }

lazy_static! {
    pub static ref DESC_MAP: HashMap<String, &'static mut EntityDesc> = {
        let mut desc_map = HashMap::new();
            desc_map.insert("BillForm".to_owned(), Box::leak(Box::new(meta::bill_form_desc::get_bill_form_desc())));
            desc_map.insert("ButtonAction".to_owned(), Box::leak(Box::new(meta::button_action_desc::get_button_action_desc())));
            desc_map.insert("CommonAttribute".to_owned(), Box::leak(Box::new(meta::common_attribute_desc::get_common_attribute_desc())));
            desc_map.insert("Component".to_owned(), Box::leak(Box::new(meta::component_desc::get_component_desc())));
            desc_map.insert("ComponentEntity".to_owned(), Box::leak(Box::new(meta::component_entity_desc::get_component_entity_desc())));
            desc_map.insert("ComponentEntityAssociate".to_owned(), Box::leak(Box::new(meta::component_entity_associate_desc::get_component_entity_associate_desc())));
            desc_map.insert("ComponentEnum".to_owned(), Box::leak(Box::new(meta::component_enum_desc::get_component_enum_desc())));
            desc_map.insert("ComponentModule".to_owned(), Box::leak(Box::new(meta::component_module_desc::get_component_module_desc())));
            desc_map.insert("ComponentNodeUi".to_owned(), Box::leak(Box::new(meta::component_node_ui_desc::get_component_node_ui_desc())));
            desc_map.insert("ComputationAttribute".to_owned(), Box::leak(Box::new(meta::computation_attribute_desc::get_computation_attribute_desc())));
            desc_map.insert("DataType".to_owned(), Box::leak(Box::new(meta::data_type_desc::get_data_type_desc())));
            desc_map.insert("DdEntity".to_owned(), Box::leak(Box::new(meta::dd_entity_desc::get_dd_entity_desc())));
            desc_map.insert("DdEnum".to_owned(), Box::leak(Box::new(meta::dd_enum_desc::get_dd_enum_desc())));
            desc_map.insert("DtoComputationAttribute".to_owned(), Box::leak(Box::new(meta::dto_computation_attribute_desc::get_dto_computation_attribute_desc())));
            desc_map.insert("DtoEntity".to_owned(), Box::leak(Box::new(meta::dto_entity_desc::get_dto_entity_desc())));
            desc_map.insert("DtoEntityAssociate".to_owned(), Box::leak(Box::new(meta::dto_entity_associate_desc::get_dto_entity_associate_desc())));
            desc_map.insert("DtoEntityAttribute".to_owned(), Box::leak(Box::new(meta::dto_entity_attribute_desc::get_dto_entity_attribute_desc())));
            desc_map.insert("DtoEntityCollection".to_owned(), Box::leak(Box::new(meta::dto_entity_collection_desc::get_dto_entity_collection_desc())));
            desc_map.insert("DtoEnum".to_owned(), Box::leak(Box::new(meta::dto_enum_desc::get_dto_enum_desc())));
            desc_map.insert("DtoEnumAssociate".to_owned(), Box::leak(Box::new(meta::dto_enum_associate_desc::get_dto_enum_associate_desc())));
            desc_map.insert("DtoEnumAttribute".to_owned(), Box::leak(Box::new(meta::dto_enum_attribute_desc::get_dto_enum_attribute_desc())));
            desc_map.insert("DtoModule".to_owned(), Box::leak(Box::new(meta::dto_module_desc::get_dto_module_desc())));
            desc_map.insert("DtoNodeUi".to_owned(), Box::leak(Box::new(meta::dto_node_ui_desc::get_dto_node_ui_desc())));
            desc_map.insert("EntityAssociate".to_owned(), Box::leak(Box::new(meta::entity_associate_desc::get_entity_associate_desc())));
            desc_map.insert("EntityAttribute".to_owned(), Box::leak(Box::new(meta::entity_attribute_desc::get_entity_attribute_desc())));
            desc_map.insert("EntityCollection".to_owned(), Box::leak(Box::new(meta::entity_collection_desc::get_entity_collection_desc())));
            desc_map.insert("EnumAssociate".to_owned(), Box::leak(Box::new(meta::enum_associate_desc::get_enum_associate_desc())));
            desc_map.insert("EnumAttribute".to_owned(), Box::leak(Box::new(meta::enum_attribute_desc::get_enum_attribute_desc())));
            desc_map.insert("ExtAttribute".to_owned(), Box::leak(Box::new(meta::ext_attribute_desc::get_ext_attribute_desc())));
            desc_map.insert("Factory".to_owned(), Box::leak(Box::new(meta::factory_desc::get_factory_desc())));
            desc_map.insert("Menu".to_owned(), Box::leak(Box::new(meta::menu_desc::get_menu_desc())));
            desc_map.insert("NodeUi".to_owned(), Box::leak(Box::new(meta::node_ui_desc::get_node_ui_desc())));
            desc_map.insert("Project".to_owned(), Box::leak(Box::new(meta::project_desc::get_project_desc())));
            desc_map.insert("Query".to_owned(), Box::leak(Box::new(meta::query_desc::get_query_desc())));
            desc_map.insert("Role".to_owned(), Box::leak(Box::new(meta::role_desc::get_role_desc())));
            desc_map.insert("RoleMenu".to_owned(), Box::leak(Box::new(meta::role_menu_desc::get_role_menu_desc())));
            desc_map.insert("SubProject".to_owned(), Box::leak(Box::new(meta::sub_project_desc::get_sub_project_desc())));
            desc_map.insert("Token".to_owned(), Box::leak(Box::new(meta::token_desc::get_token_desc())));
            desc_map.insert("Tree".to_owned(), Box::leak(Box::new(meta::tree_desc::get_tree_desc())));
            desc_map.insert("User".to_owned(), Box::leak(Box::new(meta::user_desc::get_user_desc())));
            desc_map.insert("UserRole".to_owned(), Box::leak(Box::new(meta::user_role_desc::get_user_role_desc())));
        desc_map
    };
}
